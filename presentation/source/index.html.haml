%section#intro
  = image_tag "logo.png"

  %h3 Javascript "Transpiler"

  %p
    = image_tag "http://dresden.onruby.de/assets/labels/dresden-349714ad491282910d375650db6d018f.png"
    %br
    = Date.today.strftime "%d.%m.%Y"
%section
  %section
    %blockquote
      A little language that compiles into JavaScript

    Jeremy Ashkenas (CoffeeScript + Backbone.js)

  %section
    <iframe width="640" height="360" src="https://www.youtube.com/embed/lrBhwGUF6yU?feature=player_detailpage" frameborder="0" allowfullscreen></iframe>
    = link_to "https://www.destroyallsoftware.com/talks/wat", "https://www.destroyallsoftware.com/talks/wat"

  %section
    = image_tag "javascript_good_and_bad_parts.jpg"

    %blockquote
      JS had to “look like Java” only less so, be Java’s dumb kid brother or boy-hostage sidekick. Plus, I had to be done in ten days or something worse than JS would have happened.
    Brendan Eich, creator of JS


  %section
    .fragment= image_tag "to2.png"
    <script type="text/javascript" src="http://www.google.com/trends/embed.js?hl=de&q=coffeescript,+rails+3.1&cmpt=q&content=1&cid=TIMESERIES_GRAPH_0&export=5&w=500&h=330"></script></script>
  %section
    = image_tag "github.png"

%section
  %section
    %h1.title Syntax
  %section
    %h2 Hybrid aus Ruby und Python
    %ul
      %li keine <code>;</code>
      %li keine <code>{...}</code>
      %li wenig Klammern
      %li Whitespace signifikant
  %section
    %h2 Literale / Strukturen
    .editor-content
      :preserve
        a = 2

        #if a? and a == 2
        #  console.log "a is 2"
        #else
        #  console.log "it's not"
    %aside.notes
      einfuehrung in Editor. Literale, Rueckgabewerte, Scoping
  %section

    %h2 Rückgabewerte
    .editor-content
      :preserve
        calculate = ->
          # do something
          12 + 14

        calculate()
  %section
    %h2 Objekte / Funktionen
    .editor-content
      :preserve
        math = {
          PI: 3.1415926
        }
          #square: (x) ->
          #  return x * x
          #circleUmfang: (radius) ->
          #  return this.PI * this.square(radius)

        #math.square 4
        #math.circleUmfang(2)
        http://query.yahooapis.com/v1/public/yql?q=%22USE+%22http%3A%2F%2Fyqlblog.net%2Fsamples%2Fdata.html.cssselect.xml%22+AS+data.html.cssselect%3B+SELECT+*+FROM+data.html.cssselect+WHERE+url+%3D+%22https%3A%2F%2Ftwitter.com%2Fruby_dresden%22+AND+css+%3D+%22.js-stream-tweet%22
        http://query.yahooapis.com/v1/public/yql?q=USE%20%22http%3A%2F%2Fyqlblog.net%2Fsamples%2Fdata.html.cssselect.xml%22%20AS%20data.html.cssselect%3B%20SELECT%20*%20FROM%20data.html.cssselect%20WHERE%20url%20%3D%20%22https%3A%2F%2Ftwitter.com%2Fruby_dresden%22%20AND%20css%20%3D%20%22.js-stream-tweet%22

  %section
    %h2 Klassen
    .editor-content
      :preserve
        class User
          constructor: (name) ->
            this.name = name

          #greet: ->
          #  return "Hello " + this.name

        #user = new User("stefan")
        #user.greet()

        #class Admin extends User
        #  greet: ->
        #    super + " and you are Admin!"
        #admin = new Admin("stefan")
        #admin.greet()



  %section
    %h2 jQuery &amp; co
    .editor-content
      :preserve
        #links = []
        jQuery ->
        #  $('a').each ->
        #    if a = $(@).attr("href")
        #      links.push a
        #  links
        #links

        #$.ajax
        #   url: 'http://api.twitter.com/1/statuses/user_timeline.json',
        #   type: 'GET',
        #   dataType: 'jsonp',
        #   data:
        #     screen_name: "ruby_dresden",
        #     count: 2
        #   success: (data, textStatus, xhr)->
        #     alert(tweet.text) for tweet in data
        # :( doesn't work, Twitter discontinued public REST API 1.0

        #$.ajax
        #  url: 'http://query.yahooapis.com/v1/public/yql',
        #  type: 'GET',
        #  dataType: 'jsonp',
        #  data:
        #    q: 'USE "http://yqlblog.net/samples/data.html.cssselect.xml" AS data.html.cssselect; SELECT * FROM data.html.cssselect WHERE url = "https://twitter.com/ruby_dresden" AND css = ".js-tweet-text"'
        #  success: (data, textStatus, xhr)->
        #    xml = $($.parseXML(data.results[0]))
        #    tweets = xml.find("results > p").slice(0,2)
        #    alert($(tweet).text()) for tweet in tweets

  %section

    %h2 More...
    .editor-content
      :preserve
        if a?.has(":something")?
          console.log "..."
  %section
    .fragment
      %h3 Chainable Comparison
    .editor-content
      :preserve
        if 2 < a < 5
          console.log "\#{a} is in range"
        #if a in [2..5]
        #  console.log "\#{a} is in range"
  %section
    .fragment
      %h3 Expressions everywhere
    .editor-content
      :preserve
        value = if a?
          42
        else
          23

        # sum=0
        # sum+=x for x in [0..5]



%section
  %section
    %h2 Tool-Support
  %section
    %h3 Als Javascript (zum Spielen)

    %pre.code
      :preserve
        &lt;script type="text/coffeescript">
        jQuery ->
          if coffeescript.isAwesome?
            console.log "Yeah"
        &lt;/script>
        &lt;script src="http://coffeescript.org/extras/coffee-script.js"></script>
  %section
    %h3 binary

    Installation z.B. mit npm:
    %pre.code
      npm install -g coffee-script

    Nutzen des 'coffee' Programms
    %pre.code
      :preserve
        coffee input.coffee output.js
        coffee watch
  %section
    %h3 Automatisch
    %ul
      %li Yeoman
      %li Middleman
      %li Guard-coffee
      %li LiveReload, CodeKit
  %section
    %h3 Webframeworks
    %ul
      %li Rails 3.1+ Asset pipeline
      %li Sinatra, Django, Drupal, Symfony2,...
  %section
    %h3 Rails
    %p Braucht JavaScript-Engine:
    %ul
      %li
        %pre.code
          apt-get install nodejs
      %li
        %pre.code
          :preserve
            gem "therubyracer"
  %section
    %h3 Rails - Als js.erb Ersatz

    %ul
      %li
        = link_to "markbates/coffeebeans", "https://github.com/markbates/coffeebeans"
        &rarr;
        %pre.code
          :preserve
            gem "coffeebeans"
            ...
            app/views/users/index.js.coffee
      %li.fragment
        HAML <code>coffee-filter</code>
        %pre.code
          :preserve
            :coffeescript
              $ ->
                console.log "Hello"


  %section
    %h3 Iced Coffeescript
    %blockquote
      [...] is a superset of CoffeeScript. [...]
      %br
      = link_to "IcedCoffeeScript (ICS)", "http://maxtaco.github.io/coffee-script/"
      adds two new keywords: <strong>await</strong> and <strong>defer</strong>
    Asynchrone Callbacks &rarr; (scheinbar) synchroner prozeduraler Code

  %section
    %h3 Editor
    %ul
      %li vim, eclipse, sublime, netbeans,...




%section
  %section
    %h2 Warum?

    %blockquote
      The compiled output is <strong>readable</strong> and pretty-printed, passes through <strong>JavaScript Lint without warnings</strong>, will work in every JavaScript runtime, and tends to <strong>run as fast or faster</strong> than the equivalent handwritten JavaScript.
    Coffeescript-Dokumentation
  %section
    %blockquote
      Write new JS in CoffeeScript.
    Github <strong>Javascript</strong>-Styleguide
  %section
    Dropbox
    %blockquote
      Dropbox now writes all new browser-side code in CoffeeScript, and we’ve been loving it. [...]
      %br
      In the process of converting, we shaved off more than 5000 lines of code, a 21% reduction.


    https://tech.dropbox.com/?p=361
  %section
    %h3
      = link_to "Wer nutzt es sonst noch?", "https://github.com/jashkenas/coffee-script/wiki/In-The-Wild"
    %ul
      %li Hubot
      %li Posterous
      %li Trello
      %li Airbnb Mobile
      %li Basecamp
      %li Various Node.js libs/frameworks
      %li m.nytimes, The Economist
  %section
    %blockquote
      However he still concluded that they would have been better off working in CoffeeScript, because it's easier to understand what is going [...]
      %br
      %strong
        I agree with him and will continue to use coffeescript for any non-trivial amounts of javascript.
    = link_to "Martin Fowler", "http://martinfowler.com/bliki/TransparentCompilation.html"

  %section
    %blockquote
      CoffeeScript is the closest I've felt to the power I had twenty years ago in Smalltalk.
    = link_to "Ward Cunningham","http://www.infoq.com/interviews/ward-cunningham-agile-10"

  %section
    %blockquote
      CoffeeScript is well done and more convenient to use than JS,
      %small provided you buy into the Python-esque significant space and the costs of generating JS from another source language.
      %strong But semantically it’s still JS.
    = link_to "Brendan Eich", "https://brendaneich.com/2011/01/harmony-of-my-dreams/"
  %section
    %ul
      %li Lesbarer
      %li spaßiger
      %li basiert auf Best Practices
%section
  %section
    %h2 Warum nicht?

  %section
    %h3 #1: Geschmackssache: Einrückung als Syntax
  %section
    %h3 #2: Komplexerer Build-Prozess
    .fragment
      Abhilfe schafft
      %pre.code coffee watch
      oder guard-coffeescript

    .fragment
      Non-issue mit Rails
  %section
    %h3 #3 Debugging: Zeilennummern matchen nicht mit Fehlermeldung
    .fragment
      &rarr; Source Maps in Chrome
      %br
      %small Auch zum Debugging von minified JS
  %section
    %h3 Alternativen

    %h4
      Typescript
      %i Microsoft
    %pre.code

      :preserve
        class Admin {
         ...
        }
        interface Person {
            firstname: string;
            lastname: string;
        }
        function greet(variable: Person) {...}
  %section
    %h4
      Dart2Js
      %i Google
    %pre.code
      :preserve
        class HelloDartTest {
          static testMain() {
            print("Hello, Darter!");
          }
        }
        main() {
          HelloDartTest.testMain();
        }
  %section
    %h4 LispyScript
    %pre.code
      :preserve
        (var square (function (x) (* x x)))
        (console.log (square 10))

  %section
    <script type="text/javascript" src="//www.google.de/trends/embed.js?hl=de&q=coffeescript,++dart+google,++typescript,++ClojureScript&cmpt=q&content=1&cid=TIMESERIES_GRAPH_0&export=5&w=500&h=330"></script>
%section
  %section
    %h2 Ressourcen
  %section
    %ul
      %li= link_to "CoffeeScript Doku", "http://coffeescript.org/"
      %li= link_to "CoffeeScript Cookbook", "http://coffeescriptcookbook.com"
      %li= link_to "JS2Coffee", "http://js2coffee.org"
      %li= link_to "[Youtube] CoffeeScript for the Rubyist by Mark Bates", "http://www.youtube.com/watch?v=aER4_AP3S4E"
%section

  = image_tag "http://www.gravatar.com/avatar/6edcb304a03a87ddf5c68239f7d001e4?s=200&d=identicon&r=PG", style: "float: left; margin-right: 10px"
  %p
    Stefan Wienert
    %br
    = link_to "@stefanwienert", "https://twitter.com/stefanwienert"
    %br
    = link_to "stefanwienert.net", "http://www.stefanwienert.net"
    %br
    %small Webentwickler bei pludoni GmbH

  %p.plain(style="clear: both")
    = image_tag "https://www.empfehlungsbund.de/empfehlungsbund-logo.png"
    %br
    = image_tag "https://www.empfehlungsbund.de/system/logos/1/medium/itsax.png"
    = image_tag "https://www.empfehlungsbund.de/system/logos/2/medium/itmitte.png"
    = image_tag "https://www.empfehlungsbund.de/system/logos/3/medium/mintsax.png"
    = image_tag "https://www.empfehlungsbund.de/system/logos/4/medium/officemitte.png"
    = image_tag "https://www.empfehlungsbund.de/system/logos/5/medium/officesax.png"
    %br
    = image_tag "https://www.empfehlungsbund.de/system/logos/6/medium/itbbb.png"
  :css
    .reveal .plain img { border: 0; box-shadow: none; }
